
// TODO USE THIS PIPE LOGIC INSTEAD
// bool	has_pipes(t_jobs *job)//can be replaced by yohans function?
// {
// 	if (job && job->next && job->next->type == PIPE)
// 		return (true);
// 	return (false);
// }
// void	process_pipes(t_jobs **job, t_env *env, t_jobs **og)//error checks, return values
// {
// 	t_jobs	*left, *right;
// 	(*job)->piped = true;
// 	left = (*job);
// 	right = (*job)->next->next;
// 	(*og) = (*og)->next->next;
// //	(*job) = (*job)->next->next;//not skipping enough jobs
// 	child_process(left, env);
// 	if (has_pipes(right))
// 	{
// //		(*job) = (*job)->next->next;
// 		process_pipes(&right, env, og);
// 	}
// 	else
// 		child_process(right, env);
// 	//clearjobs right and left
// }



// void	print_jobs(char *line, t_jobs *jobs)
// {
// 	ft_printf_fd(2, "line: %s\n", line);
// 	int i = 0;
// 	while (jobs->job[i])
// 	{
// 		ft_printf_fd(2, "job str %d: %s\n", i, jobs->job[i]);
// 		i++;
// 	}
// }


	// if (!envp || !envp[0])
	// {
	// 	ft_printf_fd(2, "you dirty, dirty evaluator...\nDid you really think you could run our code without an environment?\nHuzzah! No further\n");
	// 	return (1);
	// }

	//the reason why input was in lexer was so that many inputs can be processed
	// if (access(job->input, F_OK) != 0)
	// {
	// 	if (!job->redir_error_flag)//FUCKING STUPID ITS NOT WORKING
	// 	{
	// 		ft_printf_fd(2, "bash: file: No such file or directory\n");
	// 		job->redir_error_flag = true;//FUCKING STUPID ITS NOT WORKING
	// 	}
	// 	job->input = ft_strdup("/dev/null");
	// 	env->status = 1;
	// }
	// if (ft_strcmp("/dev/null", job->input) == 0)
	// 	env->status = 1;